package in.udhaya.kaikanakku.data.db;

import androidx.annotation.NonNull;
import androidx.room.ColumnInfo;
import androidx.room.Entity;
import androidx.room.PrimaryKey;

/**
 * Represents a single entry in the conversion history database.
 * This class is a Room Entity that defines the schema for the "history_table".
 * Each instance of this class corresponds to a single row in the table.
 * It is designed to be a simple, immutable data-holding class (POJO).
 */
@Entity(tableName = "history_table")
public class HistoryEntry {

    /**
     * The unique identifier for each history entry.
     * It is auto-generated by Room, so we don't need to provide it when creating a new entry.
     */
    @PrimaryKey(autoGenerate = true)
    private long id;

    /**
     * The original input text provided by the user for the conversion or calculation.
     * e.g., "500 cm" or "(1 kol) + (5 viral)".
     */
    @NonNull
    @ColumnInfo(name = "inputText")
    private final String inputText;

    /**
     * The calculated result of the conversion or calculation.
     * e.g., "6 kol 22 viral 2 cm".
     */
    @NonNull
    @ColumnInfo(name = "outputText")
    private final String outputText;

    /**
     * The total value of the result in the base unit (centimeters).
     * This field is crucial for performing numerical sorting (by size).
     */
    @ColumnInfo(name = "totalCm")
    private final double totalCm;

    /**
     * The timestamp (in milliseconds) of when the calculation was performed.
     * This is used for sorting the history by date (newest first).
     */
    @ColumnInfo(name = "timestamp")
    private final long timestamp;

    /**
     * A boolean flag to indicate if the user has marked this entry as a favorite.
     */
    @ColumnInfo(name = "isFavorite")
    private boolean isFavorite;

    /**
     * Constructor for creating a new HistoryEntry.
     * The ID is not included as it's auto-generated by Room.
     *
     * @param inputText  The original text input by the user. Cannot be null.
     * @param outputText The calculated result text. Cannot be null.
     * @param totalCm    The total value in centimeters, used for sorting.
     * @param timestamp  The time of the calculation.
     * @param isFavorite Whether the entry is marked as a favorite.
     */
    public HistoryEntry(@NonNull String inputText, @NonNull String outputText, double totalCm, long timestamp, boolean isFavorite) {
        this.inputText = inputText;
        this.outputText = outputText;
        this.totalCm = totalCm;
        this.timestamp = timestamp;
        this.isFavorite = isFavorite;
    }

    // --- Getters ---

    public long getId() {
        return id;
    }

    @NonNull
    public String getInputText() {
        return inputText;
    }

    @NonNull
    public String getOutputText() {
        return outputText;
    }

    public double getTotalCm() {
        return totalCm;
    }

    public long getTimestamp() {
        return timestamp;
    }

    public boolean isFavorite() {
        return isFavorite;
    }

    // --- Setters ---

    /**
     * Room uses this setter to assign the auto-generated ID after inserting the object.
     * This is the only setter needed for the primary key.
     */
    public void setId(long id) {
        this.id = id;
    }

    public void setFavorite(boolean favorite) {
        isFavorite = favorite;
    }
}